# 主要用来放算法的地方
import baostock as bs
import datetime
import pymysql
import openpyxl
# def aaa():
#     db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
#     cursor = db.cursor()
#     get_K = get_Kline()
#     sql1="select  date,code from daban where price='0.00'"
#     cursor.execute(sql1)
#     end_list = cursor.fetchall()
#     for index in end_list:
#         try:
#             # print(index[0],index[1])
#             data_list=get_K.getKline(str(index[0]),str(index[0]),index[1])
#             price=data_list[0][5]
#             sql2="UPDATE  daban set price='%s' WHERE date='%s' and code='%s' "%(price,str(index[0]),index[1])
#             cursor.execute(sql2)
#             db.commit()
#         except:
#             continue
#
#     get_K.bs_close()
#     db.close()
# aaa()
# def bbb():
#     from pytdx.hq import TdxHq_API
#     from pytdx.params import TDXParams
#     api = TdxHq_API()
#     db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
#     cursor = db.cursor()
#     sql_date="SELECT DISTINCT date from bs where date>='%s' and date<='%s' ORDER BY date"%('2018-01-01','2021-05-11')
#     cursor.execute(sql_date)
#     num_days = cursor.fetchall()
#     with api.connect('119.147.212.81', 7709):
#         for day in num_days:
#             # print(day[0])
#             aa=api.get_history_minute_time_data(TDXParams.MARKET_SH, '000001',str(day[0]).replace('-',''))
#             morinig_price=aa[0]['price']
#             middle_price=aa[120]['price']
#             # print(morinig_price,middle_price)
#             if float(middle_price)>=float(morinig_price):type=1
#             else:type=0
#             tup_end = (day[0], morinig_price,middle_price, type)
#             sql = "INSERT INTO shzs VALUES ('%s','%s','%s','%s')" % tup_end
#             cursor.execute(sql)
#         db.commit()
#     db.close()
# bbb()
# def ccc():
#     import requests,time,json
#     db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
#     cursor = db.cursor()
#     s=requests.session()
#     date = datetime.datetime.strptime('2020-01-23', '%Y-%m-%d').date()
#     for i in range(-1,-100,-1):
#         num_day = datetime.timedelta(i)
#         oldday = date + num_day
#         timetemp=int(time.time() * 1000)
#         tup_canshu=str(oldday).replace("-","")
#         # print(tup_canshu)
#         url="http://push2ex.eastmoney.com/getTopicZTPool?cb=callbackdata4995459&ut=7eea3edcaed734bea9cbfc24409ed989&dpt=wz.ztzt&Pageindex=0&pagesize=60&sort=fbt%%3Aasc&date=%s&_=1623128546393"%tup_canshu
#         resp=s.get(url=url,headers={'Content-Type': 'application/json',
#                         'User-Agent': 'Mo Chrome/86.0.4240.75 Safari/537.36'})
#         content=resp.text.replace('callbackdata4995459(','').replace(');','')
#         if json.loads(content)['data']==None:continue
#         needdata=json.loads(content)['data']['pool']
#         for index in needdata:
#             name=index['n']
#             code=index['c']
#             price=float(index['p'])/1000
#             amount=float(index['amount'])
#             turn=str(index['hs'])[0:4]
#             updown=str(index['zdp'])[0:4]
#             shizhi,highdays,limittype,reason='0','null','null','null'
#             print(oldday,name,code,price,amount,turn)
#             data_tup = (oldday, code, name, price, updown, turn, shizhi, highdays, limittype, reason, amount)
#             sql = "INSERT INTO daban_zd VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')" % data_tup
#             cursor.execute(sql)
#         db.commit()
#     db.close()
# ccc()
class get_Kline(object):
    def __init__(self):
        self.lg = bs.login()
    def getKline(self,beginDate,endDate,code):
        if code[0] == '0':code = "sz." + code
        if code[0] == '6':code = 'sh.' + code
        if code[0] == '3':code = 'sz.' + code
        if code[0] == '2':code = 'sz.' + code
        if code[0] == '9':code = 'sh.' + code
        rs = bs.query_history_k_data_plus(code,
                                          "date,code,open,high,low,close,preclose,volume,amount,turn,pctChg",
                                          start_date=beginDate, end_date=endDate,
                                          frequency="d", adjustflag="2")
        data_list = []
        while (rs.error_code == '0') & rs.next():
            data_list.append(rs.get_row_data())
        # print(data_list)
        return data_list

    def testgetKline(self,beginDate, endDate, code,k):
        if code[0] == '0':code = "sz." + code
        if code[0] == '6':code = 'sh.' + code
        if code[0] == '3':code = 'sz.' + code
        if code[0] == '2':code = 'sz.' + code
        if code[0] == '9':code = 'sh.' + code
        rs = bs.query_history_k_data_plus(code,
                                          "date,time,code,open,high,low,close,volume,amount",
                                          start_date=beginDate, end_date=endDate,
                                          frequency=k, adjustflag="2")
        data_list = []
        while (rs.error_code == '0') & rs.next():
            # 获取一条记录，将记录合并在一起
            data_list.append(rs.get_row_data())
        return data_list
    def bs_close(self):
        bs.logout()

# def ddd():#下载所有股票代码
#     import requests,time,json
#     db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
#     cursor = db.cursor()
#     s=requests.session()
#     resp=s.get(url='http://api.k780.com/?app=finance.stock_list&category=hs&appkey=10003&sign=b59bc3ef6191eb9f747dd4e83c99f2a4&format=json',headers={'Content-Type': 'application/json',
#                         'User-Agent': 'Mo Chrome/86.0.4240.75 Safari/537.36'})
#     end=resp.json()['result']['lists']
#     for stock in end:
#         data_tup=(stock['symbol'][2:],stock['sname'])
#         # print(data_tup)
#         sql = "INSERT INTO stocks VALUES('%s','%s')" % data_tup
#         cursor.execute(sql)
#     db.commit()
#     db.close()
# ddd()
#下载历史深市中小板每日涨停股
# def eee():
#     get_K=get_Kline()
#     db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
#     cursor = db.cursor()
#     code_sql="SELECT * from stocks WHERE code like '00%'"
#     cursor.execute(code_sql)
#     code_list = cursor.fetchall()
#     date = datetime.datetime.strptime('2019-08-14', '%Y-%m-%d').date()
#     for i in range(-1,-200,-1):
#         num_day = datetime.timedelta(i)
#         oldday = str(date + num_day)
#         for stock in code_list:
#             code = stock[0]
#             name = stock[1]
#             if 'ST' in name:continue
#             if '退' in name:continue
#             data_list=get_K.getKline(oldday,oldday,code)
#             # print(data_list)
#             if data_list==[]:continue
#             price=float(data_list[0][5])
#             updown=float(data_list[0][10])
#             if data_list[0][9]=='':continue
#             turn=float(data_list[0][9])
#             amount=float(data_list[0][8])
#             if updown<9.95:continue
#             shizhi,highdays,limittype,reason='0','null','null','null'
#             data_tup = (oldday, code, name, price, updown, turn, shizhi, highdays, limittype, reason, amount)
#             print(data_tup)
#             sql = "INSERT INTO daban_zd VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')" % data_tup
#             cursor.execute(sql)
#         db.commit()
#     db.close()
# eee()
# def hhh():
#     get_K = get_Kline()
#     data_list1=get_K.getKline('2021-06-01','2021-06-07','002077')
#     # data_list2=get_K.testgetKline('2021-08-20','2021-08-20','003039','5')
#     print(data_list1)
#     # print(float(data_list2[29][3]))

def syl_ruku():
    db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
    cursor = db.cursor()
    get_K = get_Kline()
    sql0="SELECT DISTINCT date FROM daban_zd  ORDER BY date desc limit 3"
    cursor.execute(sql0)
    day_list = cursor.fetchall()
    sql1="SELECT date,code from daban_zd WHERE updown >0 and code like'00%%' and date='%s'"%str(day_list[2][0])
    cursor.execute(sql1)
    end_list = cursor.fetchall()
    for index in end_list:
        code=index[1]
        day=index[0]
        data_list = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code)
        # print(data_list)
        sell_day = data_list[2][0]  # 卖的日期

        data_list3 = get_K.testgetKline(sell_day, sell_day, code, '5')
        sell_price=float(data_list3[29][3])
        if data_list3 == []: continue
        if float(data_list[1][2]) < float(data_list[1][6]):
            buy_price = float(data_list[1][2])
        elif float(data_list[1][4]) <= float(data_list[1][6]) < float(data_list[1][3]):  # 今日最低<上一日收盘价<今日最高
            buy_price = float(data_list[1][6])  # 买价，T日开盘价
        else:continue  # 找不到买价就退出循环
        syl = "%.2f%% " % ((sell_price - buy_price) / buy_price * 100)  # 收益率
        print(syl,code,day)
        sql2="update daban_zd set syl='%s' where date='%s'and code='%s'"%(syl,day,code)
        cursor.execute(sql2)
        db.commit()

    get_K.bs_close()
    db.close()
# syl_ruku()

def suanfa1():
    db = pymysql.connect("47.111.24.112", "root", "withme_321", "test")
    cursor = db.cursor()
    get_K = get_Kline()
    data={
# '4/23/2021':'002665',
'4/23/2021':'002240',
'4/26/2021':'000928',
'4/27/2021':'002612',
# '4/28/2021':'000908',
'4/28/2021':'002773',
'4/29/2021':'000718',
'4/30/2021':'000963',
'5/10/2021':'000630',
'5/11/2021':'000950',
'5/12/2021':'000625',
'5/13/2021':'002022',
'5/14/2021':'000625',
'5/17/2021':'002709',
'5/18/2021':'002997',
# '5/19/2021':'000066',
'5/19/2021':'002759',
# '5/20/2021': '002387',
'5/20/2021': '002235',
'5/21/2021':'000762',
'5/24/2021':'000402',
# '5/25/2021':'000793',
'5/25/2021':'000829',
'5/26/2021':'002585',
'5/27/2021':'002617',
# '5/28/2021':'000993',
'5/28/2021':'002284',
# '5/31/2021':'002585',
'5/31/2021':'002271',
'5/6/2021':'000155',
'5/7/2021':'002162',
'6/1/2021':'000504',
'6/10/2021':'000034',
'6/11/2021':'000909',
'6/15/2021':'002273',
'6/16/2021':'002383',
'6/17/2021': '003000',
'6/18/2021':'000158',
'6/2/2021':'003001',
'6/21/2021':'002683',
'6/22/2021':'002870',
'6/23/2021':'000625',
'6/24/2021':'000058',
'6/25/2021':'003022',
'6/28/2021':'002074',
'6/29/2021':'002759',
'6/3/2021':'000953',
'6/30/2021':'002326',
'6/4/2021':'002373',
'6/7/2021':'002156',
'6/8/2021':'002011',
'6/9/2021':'002625',
'7/1/2021':'000908',
'7/2/2021': '000034',
'7/12/2021':'000636',
'7/13/2021':'002411',
# '7/14/2021':'002581',
'7/14/2021':'000800',
'7/15/2021':'000977',
# '7/16/2021':'002276',
'7/16/2021':'000612',
'7/19/2021':'002396',
'7/20/2021':'002553',
'7/21/2021':'002108',
'7/22/2021':'002455',
'7/23/2021': '000507',
'7/26/2021':'002506',
'7/27/2021':'002463',
'7/28/2021':'002172',
'7/29/2021':'002129',
'7/30/2021':'000762',
'7/5/2021':'002460',
'7/6/2021':'002080',
'7/7/2021':'002074',
'7/8/2021':'000009',
'7/9/2021':'002709',
'8/9/2021': '002714',
'8/10/2021':'000576',
'8/11/2021':'002518',
'8/12/2021':'002312',
'8/13/2021':'000762',
'8/16/2021':'000572',
# '8/17/2021': '001210',
'8/17/2021':'000751',
'8/18/2021':'000738',
'8/19/2021':'002149',
'8/2/2021':'002594',
'8/20/2021':'000877',
'8/23/2021':'002465',
'8/24/2021':'000878',
'8/25/2021':'000821',
'8/26/2021':'002256',
'8/27/2021':'002497',
'8/3/2021':'002520',
'8/30/2021':'000762',
'8/31/2021':'002176',
'8/4/2021':'002594',
'8/5/2021':'002389',
'8/6/2021':'002407',
'9/1/2021':'000425',
'9/2/2021': '000301',
'9/3/2021': '002202',
'9/6/2021': '000825',
'9/7/2021': '002326',
'9/8/2021': '000966',
'9/9/2021': '002377',
'9/10/2021':'002240',
'9/13/2021':'002176',
'9/14/2021':'000009',
'9/15/2021':'002202',
'9/16/2021': '000912',
'9/17/2021':'000791',
'9/22/2021':'000883',
'9/23/2021':'000488',
'9/24/2021': '002459',
'9/27/2021': '000858',
'9/28/2021':'000591',
'9/29/2021':'002610',
'9/30/2021':'002709',
'10/8/2021':'000998',
'10/11/2021':'000836',
'10/12/2021':'000422',
'10/13/2021':'002326',
'10/14/2021': '002610',
'10/15/2021': '000423',
'10/18/2021': '002176',
'10/19/2021': '002261',
'10/20/2021': '002192',
'10/21/2021': '000422',
'10/22/2021': '002617',
'10/25/2021': '002074',
'10/26/2021': '000791',
'10/27/2021': '002202',
'10/28/2021': '002805',
'10/29/2021': '002312',
'11/01/2021': '002610',
'11/02/2021':'000982',
'11/03/2021': '002335',
'11/04/2021': '002202',
          }
    data1={}
    money=50000
    sum = 0
    for k,v in data.items():
        klist=k.split('/')
        if len(klist[0])==1:klist[0]='0'+klist[0]
        if len(klist[1])==1:klist[1]='0'+klist[1]
        data1[klist[2]+'-'+klist[0]+'-'+klist[1]]=v
    for date,code in data1.items():
        sql2="select date,code,dde_lookday,dde_buyday from daban_zd where date='%s'and code='%s'"%(date,code)
        cursor.execute(sql2)
        stock_list= cursor.fetchall()
        for index in stock_list:
            day=index[0]
            code=index[1]
            dde_lookday=index[2]
            dde_buyday=index[3]
            data_list = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code)
            sell_day = data_list[2][0]  # 卖的日期
            # 5分钟为单位的K线
            data_list3 = get_K.testgetKline(sell_day, sell_day, code, '5')
            if data_list3 == []: continue
            high_price,low_price,buy_price,sell_price = [],[],0,0
            # data_list4=get_K.testgetKline(sell_day, sell_day, code, '30')
            for xxx in data_list3:
                high_price.append(float(xxx[4]))
                low_price.append(float(xxx[5]))
            high_price=high_price[3:46]
            low_price=low_price[3:24]

            if float(data_list[1][2]) < float(data_list[1][6]):
                # float(data_list[1][2])*0.992>float(data_list[1][4]):
                buy_price = float(data_list[1][2])
            elif float(data_list[1][4]) <= float(data_list[1][6])*0.984 < float(data_list[1][3]):  # 今日最低<上一日收盘价<今日最高
                buy_price = float(data_list[1][6])*0.984  # 买价，T日开盘价
            else:break  # 找不到买价就进行下一次循环
            #在[29][3]之前找出是否涨停
            highest_price,lowest_price=max(high_price),min(low_price)
            syl=(highest_price-float(data_list[1][5]))/float(data_list[1][5])

            # x = abs(float(dde_buyday) / float(dde_lookday))
            # if syl>=0.0992:
            #     sell_price=highest_price
            # elif float(dde_buyday)<0 and  0.8<x<1:
            # # !!!!满足dde条件后，卖日float(data_list3[3][3])是绿色的，则float(data_list3[3][3])价格卖，不是则使用上/下两个卖价
            #     sell_price=float(data_list3[3][3])
            #     syl2 = "%.2f%% " % ((sell_price - buy_price) / buy_price * 100)  # 收益率
            # else:sell_price=float(data_list3[29][3])

            #如果亏损5个点，则立马卖。

            syl0=(float(data_list[1][5]) - buy_price) / buy_price
            # print(syl0)
            if syl>=0.0992:
                sell_price=highest_price
            elif syl0<0 and (float(data_list3[4][3])-buy_price)/buy_price<-0.04:
                sell_price=float(data_list3[5][3])#算下股票是否和上面条件有冲突

            else:
                sell_price=float(data_list3[47][3])

            money = money * (1 + (sell_price - buy_price) / buy_price) * 0.9985
            sum += 1
            print(money, sum, code, day, buy_price, sell_price)
    db.close()
suanfa1()
概念里，交易量最大的开盘跌了买，然后其他开盘跌的买（可以根据跌的幅度或者交易量），最后就是交易量最大的-1.5%
def jjj():
    # workbook = openpyxl.load_workbook('C:\\Users\Administrator\Desktop\\aaa.xlsx')
    # sheet = workbook['Sheet1']
    # # 读取指定的单元格数据
    # riqi='2021-9-15'
    # data_dic,data_list,data_list1={},[],[]
    # for index in range(1,60):
    #     cell1 = sheet.cell(row=index, column=1).value
    #     cell2 = sheet.cell(row=index, column=2).value
    #     cell3 = sheet.cell(row=index, column=12).value
    #     cell4=sheet.cell(row=index, column=13).value
    #     # print(cell1.date())
    #     if str(cell1.date())==riqi:
    #         v = [cell2, cell3,cell4]
    #         data_list.append(v)
    #     else:
    #         riqilist=str(riqi).split('-')
    #         if len(riqilist[1])==1:riqilist[1]='0'+riqilist[1]
    #         if len(riqilist[2]) == 1: riqilist[2] = '0' + riqilist[2]
    #         xxx=riqilist[0]+'-'+riqilist[1]+'-'+riqilist[2]
    #         data_dic[xxx]=data_list
    #         riqi = str(cell1.date())
    #         data_list=[]
    #         v = [cell2, cell3,cell4]
    #         data_list.append(v)
    #     #最后一天临时用这个方法统计进去
    #     if str(cell1.date())=='2021-09-28':
    #         v = [cell2, cell3, cell4]
    #         data_list1.append(v)
    #         data_dic['2021-09-28']=data_list1
    # print(data_dic)
    data={'2021-05-17': [['002709', '17000.00', '-2765.70'], ['002472', '2045.47', '-2272.59']],
     '2021-08-31': [['002176', '73200.00', '-79500.00'], ['002240', '19300.00', '-50600.00'],
                    ['000761', '2208.01', '-768.28'], ['000935', '3953.79', '1620.31'],
                    ['000931', '10200.00', '-4972.22'], ['002192', '13400.00', '18600.00'],
                    ['000629', '25200.00', '-23900.00'], ['000762', '-4522.85', '-75900.00']],
     '2021-08-09': [['002714', '52000.00', '12700.00']],
     '2021-09-03': [['002202', '97900.00', '-66200.00'], ['002012', '6261.74', '-10700.00'],
                    ['000791', '10300.00', '5902.63'], ['002531', '11000.00', '-47300.00'],
                    ['002184', '11900.00', '-3213.33'], ['002451', '3873.26', '-1613.47'],
                    ['000058', '3459.84', '-8129.20'], ['002103', '5633.87', '-3495.18']],
     '2021-06-24': [['000058', '5865.12', '-1589.80'], ['002047', '2334.39', '-1261.56'],
                    ['002309', '3375.32', '-3214.68'], ['000040', '4399.06', '-4512.09']],
     '2021-05-28': [['000993', '12000.00', '-1158.82'],
                    ['000532', '6312.64', '-10800.00']],
     '2021-07-01': [['000908', '12100.00', '-9715.09'], ['000790', '5106.81', '-2038.18'],
                    ['002118', '9004.62', '-2847.92']],
     '2021-08-24': [['000878', '26100.00', '-16400.00'], ['000301', '12300.00', '-14900.00'],
                    ['002506', '25300.00', '-12900.00'],
                    ['000519', '15200.00', '-8806.11'], ['000688', '4574.88', '3216.31'],
                    ['000510', '5117.08', '-4489.21'], ['002378', '14500.00', '-2654.93'],
                    ['002865', '2139.47', '-459.74']],
     '2021-08-11': [['002518', '23100.00', '8431.55'], ['002580', '14700.00', '-8319.75'],
                    ['002733', '12600.00', '-8271.98'], ['002547', '7485.50', '-2715.79'],
                    ['002598', '6565.06', '-3521.98'], ['002334', '13200.00', '-7884.43'],
                    ['002665', '13400.00', '-10600.00'], ['002009', '11700.00', '1853.99'],
                    ['002335', '21400.00', '-18500.00'],
                    ['002227', '4776.87', '-571.22'], ['002480', '4179.33', '-1734.34'],
                    ['002363', '3710.99', '-2841.73']],
     '2021-08-30': [['000762', '95500.00', '-4522.85'], ['002460', '59900.00', '21400.00'],
                    ['002192', '17600.00', '13400.00'], ['002667', '12500.00', '-3522.15'],
                    ['000040', '7171.33', '-3148.67'], ['002411', '7324.31', '-21100.00']],
     '2021-07-30': [['000762', '39900.00', '-52600.00'], ['002123', '7182.72', '-3211.77'],
                    ['002466', '19400.00', '-106300.00'], ['002192', '15900.00', '-40700.00'],
                    ['002484', '2159.30', '-6791.65'], ['002472', '12700.00', '1850.80'],
                    ['002035', '2739.56', '-1316.69'], ['002309', '4126.97', '-1390.88'],
                    ['002533', '9905.92', '-13200.00'], ['002497', '21400.00', '-40100.00']],
     '2021-06-22': [['002870', '-56.76', '-914.79']],
     '2021-08-16': [['002988', '3399.66', '1499.52'], ['001206', '3163.70', '-1888.72'], ['002865', '7.81', '384.66'],
                    ['002996', '6346.48', '-1363.31'], ['001207', '5768.87', '11000.00'],
                    ['002249', '-70.79', '-50700.00'], ['001202', '2285.19', '-1189.80']],
     '2021-09-07': [['002326', '20500.00', '-12400.00'], ['002165', '3664.85', '-543.30'],
                    ['000698', '12200.00', '-3772.08'], ['002476', '2636.75', '-278.24']],
     '2021-09-13': [['002176', '22200.00', '-87800.00'], ['002140', '6742.54', '-1501.55'],
                    ['002538', '16500.00', '4.38'], ['002942', '4335.19', '-1043.04'], ['002895', '7448.13', '3072.94'],
                    ['002170', '7.97', '-69.80'], ['000968', '4008.51', '-4847.97'], ['002667', '3243.50', '1168.68'],
                    ['002165', '5770.21', '-2415.09']],
     '2021-06-23': [['002466', '101900.00', '-52900.00'], ['002812', '44300.00', '9794.64'],
                    ['000625', '104100.00', '-51200.00'], ['000572', '12500.00', '-8199.29'],
                    ['002045', '10500.00', '-2602.76'], ['003032', '4576.15', '-6059.63']],
     '2021-07-23': [['002176', '-7130.56', '-24700.00'],
                    ['000507', '11200.00', '-4420.41'], ['002453', '1812.94', '-3852.91']],
     '2021-07-21': [['002108', '26700.00', '-22200.00'], ['002564', '-11300.00', '-14700.00'],
                    ['000762', '25700.00', '-17200.00'], ['002374', '1104.94', '-2162.39'],
                    ['002144', '2090.79', '-1569.64'], ['002738', '13700.00', '-2077.02'],
                    ['002418', '-2179.12', '-11000.00']],
     '2021-04-30': [['000963', '68300.00', '-160800.00'], ['000650', '21500.00', '-13800.00'],
                    ['002390', '973.41', '-4416.07'],
                    ['000718', '3317.28', '-7693.29'],
                    ['000813', '5952.50', '-15000.00']],
     '2021-06-03': [['000953', '801.04', '-539.45'], ['000803', '-549.03', '-2507.30'],
                    ['002290', '308.82', '-4414.72']],
     '2021-06-11': [['000909', '4795.77', '-3663.04'], ['002006', '4430.43', '-1253.65'],
                    ['002892', '-3760.54', '-67.01'], ['002758', '2753.40', '-1379.37']],
     '2021-05-13': [['002022', '13300.00', '-4077.56'], ['002435', '9699.38', '-12300.00'],['002581','10400.00','-26100.00'],
                     ['000790', '451.54', '-19400.00']],
     '2021-09-09': [['002377', '1895.65', '-625.12']],
     '2021-05-26': [['002585', '7093.21', '-5209.11'], ['002838', '5290.74', '-4906.28'],
                    ['003036', '-5935.40', '-1020.52'], ['003003', '3291.33', '-1835.40'],
                    ['003032', '3388.92', '-2089.64']],
     '2021-06-29': [['002335', '5229.27', '-11100.00'], ['002529', '2024.49', '-2094.39']],
     '2021-04-23': [['002665', '15100.00', '-12400.00'],
                    ['002885', '2443.91', '-1684.19'], ['002630', '8162.44', '-20400.00']],
     '2021-08-04': [['002594', '232500.00', '-97600.00'], ['002516', '3894.05', '-2039.48'],
                    ['002782', '4281.12', '-15300.00'], ['002192', '6400.75', '-9183.81'],
                    ['002006', '4126.69', '-11000.00'],
                    ['002466', '91700.00', '-42600.00'],
                    ['000155', '44300.00', '7490.99'], ['002518', '20200.00', '-12000.00'],
                    ['000040', '5723.80', '-2009.58'], ['002709', '81500.00', '6824.49'],
                    ['000829', '13900.00', '-7469.84'], ['002812', '28900.00', '13400.00'],
                    ['000821', '9319.58', '-9865.61'], ['000572', '20900.00', '-10700.00'],
                    ['002472', '6579.45', '-4203.84'], ['002309', '6915.67', '-333.95']
                    ],
     '2021-05-18': [['002997', '7936.82', '-5152.66'], ['003027', '5439.07', '-19800.00'],
                    ['003020', '1509.80', '-1431.28'],
                    ['002922', '1932.63', '-8148.01']],
     '2021-07-27': [['002201', '5832.60', '-28900.00'], ['002331', '3964.59', '-1427.08']],
     '2021-05-10': [['000630', '56600.00', '-42000.00'], ['002348', '1407.88', '-5064.31'],
                    ['000923', '248.77', '-10400.00'], ['000761', '781.20', '-28.56'],
                    ['000807', '1531.08', '-4727.74'], ['002762', '-7183.01', '-17200.00'],
                    ['000962', '385.90', '-1023.95'], ['002570', '3650.66', '-16900.00'],
                    ['002245', '16100.00', '-12400.00'], ['000933', '7637.57', '-26200.00'],
                    ['000688', '4260.72', '-2730.92'], ['002738', '1603.13', '-4526.46'],
                    ['000959', '1817.24', '-11300.00'], ['002532', '6994.37', '3992.76'],
                    ['000975', '10600.00', '-9402.83']],
     '2021-08-20': [['000877', '18900.00', '-4051.65'],
                    ['002518', '12800.00', '-23800.00'], ['002643', '4211.57', '-8255.31']],
     '2021-08-13': [['000762', '135700.00', '-25200.00'], ['002454', '5258.65', '-6849.71'],
                    ['002008', '82100.00', '-19900.00'], ['002196', '6101.05', '-3118.91'],
                     ['002386', '13900.00', '-21400.00'],
                    ['002140', '986.33', '-14400.00']],
     '2021-06-28': [['002074', '29300.00', '-20500.00'], ['002738', '2028.14', '-7729.62'],
                    ['002620', '1155.18', '-2928.31'], ['000009', '3216.03', '-9632.97']],
     '2021-09-10': [['002240', '35200.00', '-42200.00'], ['002411', '17100.00', '-8257.91']
                    ],
     '2021-09-08': [['000966', '22000.00', '-15500.00'], ['002039', '2421.44', '-2846.92'],
                    ['002060', '7048.06', '-6818.34'], ['000862', '3457.66', '-14900.00']],
     '2021-07-02': [['000034', '21100.00', '-7427.72']],
     '2021-05-31': [['002585', '10200.00', '156.51'], ['000993', '-1158.82', '-6475.76'],
                    ['000408', '6818.35', '-6070.87'], ['002931', '2718.54', '-1498.90'],
                    ['002407', '8206.39', '-18900.00'], ['002759', '4656.75', '-8942.22']],
     '2021-07-19': [['002396', '15800.00', '-9835.24'], ['000766', '1527.39', '-363.79'],
                    ['000510', '3248.79', '-4257.36'], ['000004', '2305.18', '-3314.13'],
                    ['002622', '7746.42', '-6833.29'], ['003038', '4677.67', '1151.14'],
                    ['002088', '1564.58', '-1068.52'], ['002806', '2927.56', '1138.33'],
                    ['002453', '4196.89', '-4411.57'], ['002760', '938.99', '1355.72'],
                    ['002564', '5840.98', '1642.60'], ['002933', '4272.02', '746.54']],
     '2021-08-17': [['001210', '8507.29', '-5215.94']],
     '2021-05-25': [['000793', '8648.86', '-4588.60'], ['002998', '6108.21', '-1734.97'],
                    ['002717', '339.65', '-5642.34']],
     '2021-08-23': [['002465', '23100.00', '-1831.49'], ['003038', '1366.54', '1251.71'],
                    ['002132', '1667.71', '-21800.00'], ['002527', '2722.58', '-3970.84'],
                    ['002218', '13300.00', '-8950.47'],
                    ['000821', '-1378.66', '-22300.00']],
     '2021-04-27': [['002612', '16600.00', '-6781.68'],
                    ['002584', '7065.97', '-4214.81']],
     '2021-06-08': [['002011', '3836.44', '-3010.12'], ['002881', '1359.29', '-70.93']],
     '2021-06-01': [['000504', '703.15', '438.06'], ['002502', '-8109.98', '-4908.76']
                    ],
     '2021-08-02': [['002594', '246100.00', '-153800.00'], ['000584', '1944.34', '-784.99'],
                     ['002782', '5527.20', '5485.07'],
                    ['000951', '2314.60', '3499.94'], ['002176', '-17900.00', '-77000.00'],
                    ['002190', '6969.93', '-2378.37'], ['002897', '11200.00', '-118.14'],
                    ['002667', '80.03', '-1332.93'], ['002141', '3270.17', '-1276.77'],
                    ['002239', '12200.00', '-11800.00']],
     '2021-08-03': [['002520', '11100.00', '-4569.12'], ['002689', '3034.14', '-1710.56'],
                    ['002932', '5582.61', '-6275.69'], ['002896', '1833.00', '-329.70']],
     '2021-06-17': [['003000', '3858.80', '-1232.38']],
     '2021-06-25': [['002620', '-3823.74', '1155.18'],['003022','2549.49','-8393.81']],
     '2021-07-09': [['002709', '68100.00', '-22500.00'], ['002411', '11400.00', '-2922.45'],
                    ['002196', '6011.61', '-5838.67'], ['002346', '7147.58', '-8787.91']],
     '2021-05-24': [['000402', '10800.00', '-3358.60'], ['002471', '7694.23', '2144.76'],
                    ['000592', '-6330.16', '-23100.00'], ['002598', '1225.41', '-2037.28']],
     '2021-08-18': [['000738', '26200.00', '-1711.03'],
                    ['001207', '4877.84', '-3895.94'], ['000901', '18300.00', '-8033.95'],
                    ['003036', '3324.14', '-1771.77'], ['003039', '-494.99', '-12100.00'],
                    ['003031', '3128.39', '-8434.65'], ['002297', '8022.52', '-85.41']],
     '2021-09-06': [['000825', '57200.00', '-16300.00']],
     '2021-07-12': [['000636', '36000.00', '-6788.80'], ['002460', '35100.00', '2377.78'],
                    ['002960', '-1424.40', '-74.67'], ['002724', '555.52', '-472.85'], ['002824', '2675.01', '-199.86'],
                    ['002850', '-2110.78', '-3672.21'], ['000962', '1883.83', '-5212.26'],
                    ['002858', '1287.36', '-431.69'], ['002119', '3781.73', '-6655.75'],
                    ['002109', '4831.23', '-4293.23'], ['002902', '3925.62', '-1928.83'],
                    ['002810', '2254.13', '2121.93'], ['002732', '1527.92', '463.76']],
     '2021-07-15': [['000977', '130000.00', '-41500.00'], ['002906', '8131.31', '1183.76'],
                    ['000761', '5273.26', '-2524.38'], ['002145', '16700.00', '-23000.00'],
                    ['002442', '9586.71', '-7257.02'], ['000887', '6933.71', '-8470.43'],
                    ['000519', '39400.00', '14900.00'], ['000498', '2698.93', '19.49'], ['000506', '634.26', '820.54']],
     '2021-05-07': [['002162', '25200.00', '-19100.00'], ['002274', '9910.92', '-12100.00'],
                    ['002721', '1662.75', '-3468.22']],
     '2021-06-04': [['002373', '26500.00', '-18000.00'], ['002407', '20400.00', '-47800.00'],
                    ['002240', '18800.00', '-23800.00'], ['002178', '-1555.92', '-5305.72'],
                    ['002190', '8609.21', '-5112.18'], ['002091', '12100.00', '-17800.00'],
                    ['002885', '5940.65', '-3525.77']],
     '2021-07-26': [['002506', '39200.00', '-27200.00'], ['002580', '1148.35', '-15900.00'],
                    ['002170', '10400.00', '-8681.16'],
                    ['002418', '11700.00', '-6265.53'], ['002121', '-3292.80', '-14600.00'],
                    ['002516', '3943.67', '-3713.35']],
     '2021-05-27': [['002617', '23000.00', '-3568.71'], ['002158', '3404.89', '-1453.81'],
                    ['003039', '4435.84', '-22500.00'], ['003026', '12000.00', '-8514.81']],
     '2021-09-14': [['000009', '73100.00', '-41700.00'], ['002455', '26300.00', '-21500.00'],
                    ['002141', '4710.31', '-2302.67'], ['000068', '4578.04', '-3012.45'],
                    ['002341', '9463.28', '-9677.68'], ['000004', '3110.18', '-2571.00'],
                    ['002108', '26200.00', '-11900.00'], ['003032', '5615.71', '-1365.17'],
                    ['002261', '13600.00', '-10400.00'], ['002632', '5832.79', '1028.54'],
                    ['002922', '10400.00', '-6242.50']], '2021-05-20': [['002387', '5707.17', '-2992.89']],
     '2021-05-21': [['000762', '26100.00', '-29800.00'], ['000037', '1423.15', '261.29'],
                    ['002455', '5431.75', '-7486.91'], ['002738', '4882.13', '-2429.88'],
                    ['002178', '4670.41', '-1423.50'], ['002227', '3426.11', '-4725.72']],
     '2021-07-08': [['000009', '15800.00', '-32000.00'], ['002025', '5568.91', '-7757.40'],
                    ['002341', '10300.00', '-1107.41'], ['002824', '1899.43', '-1178.17'],
                    ['002149', '11800.00', '-2162.53'], ['000920', '1067.44', '-5773.01']],
     '2021-07-07': [['002074', '33000.00', '-9923.40'], ['002965', '2514.52', '-2622.26'],
                    ['002455', '11900.00', '-14500.00'],
                    ['002182', '6646.70', '-7961.47'], ['002108', '19000.00', '-5028.73']],
     '2021-05-06': [['000155', '10900.00', '-23700.00'], ['000761', '669.73', '-1679.88'],
                    ['002721', '2214.79', '1662.75']],
     '2021-08-26': [['002256', '51200.00', '-28300.00'], ['000545', '7062.91', '-1416.39'],
                    ['000982', '13900.00', '-9977.31'], ['000758', '18100.00', '-20800.00'],
                    ['000751', '5273.07', '-21800.00'], ['000761', '2485.43', '-1781.94'],
                    ['000506', '7228.58', '-3508.65']],
     '2021-06-21': [['002683', '5611.18', '1031.00'], ['002023', '-5504.49', '-26300.00'],
                    ['002331', '2521.80', '-4178.73']],
     '2021-07-20': [['002536', '8063.79', '-4205.99'], ['002580', '2242.66', '-1533.10'],
                    ['002446', '7143.56', '-9206.80'], ['002598', '-6382.59', '-1520.05'],
                    ['002518', '7894.25', '-7016.33'], ['000561', '1293.92', '-7033.79']],
     '2021-06-18': [['000158', '38800.00', '-65400.00'], ['002709', '31100.00', '-35700.00'],
                    ['002725', '1924.26', '-1935.07']],
     '2021-06-30': [['002326', '22300.00', '-20700.00'], ['002805', '3221.13', '-1632.82'],
                    ['002824', '2496.81', '-1443.24'], ['000532', '8176.86', '-5634.83']
                    ],
     '2021-08-12': [['002312', '21800.00', '-9801.74'], ['000422', '1082.18', '-11300.00'],
                    ['002125', '10600.00', '-6640.28'], ['002637', '2374.85', '1974.66'],
                    ['002326', '7893.90', '-51900.00'], ['000593', '5277.52', '-3039.45'],
                    ['002597', '11000.00', '-5644.07']],
     '2021-04-26': [['000928', '26900.00', '-2106.62'], ['000150', '-3790.93', '-8626.22'],
                    ['002742', '1696.38', '-1618.87'], ['003002', '5299.28', '-893.44'],
                    ['002932', '5656.70', '-1595.08'], ['002370', '3025.59', '-1199.38'],
                    ['002988', '6568.03', '-2733.72'], ['000908', '12400.00', '1497.38'],
                    ['000518', '7502.93', '-4804.40']],
     '2021-05-12': [['000625', '114800.00', '-81900.00'], ['000868', '4122.60', '-1510.31'],
                    ['002612', '25700.00', '-55700.00'],
                    ['002284', '5264.06', '-9191.58']],
     '2021-07-13': [['002411', '13800.00', '-13800.00'], ['002759', '3515.78', '-21400.00'],
                    ['002791', '-301.62', '-6965.27'],
                    ['000155', '3822.16', '-41200.00'],
                    ['000012', '-5861.29', '-20900.00'], ['002341', '7646.56', '-7250.77'],
                    ['002620', '1828.32', '-4388.73'], ['002870', '1586.84', '-2031.26'],
                    ['002455', '10100.00', '-13200.00']],
     '2021-06-09': [['002625', '19400.00', '-959.28'], ['002747', '9942.65', '-1770.04'],
                    ['002149', '10800.00', '-4355.64'], ['002895', '6542.03', '-3978.34']],
     '2021-07-28': [['002172', '9658.95', '-963.07'], ['002932', '5713.86', '-3707.54']],
     '2021-08-27': [['002497', '65100.00', '-56100.00'], ['002256', '-28300.00', '1609.41'],
                    ['002759', '34300.00', '-23200.00'], ['002048', '4168.43', '2621.84'],
                    ['002057', '10400.00', '-12900.00'], ['002240', '51600.00', '-56700.00'],
                    ['002125', '13100.00', '-15000.00']],
     '2021-06-02': [['003001', '8043.59', '-6439.51'], ['002660', '6776.17', '-4257.80'],
                    ['002426', '-3748.76', '-32100.00'], ['002269', '-1910.93', '-25100.00'],
                    ['003041', '7044.52', '-3191.99'], ['002319', '1397.64', '-620.65']
                    ],
     '2021-08-19': [['002149', '21400.00', '5020.89'], ['000739', '5115.01', '-4692.97'],
                    ['003032', '4552.38', '-3068.69'], ['002300', '-7675.47', '-5573.47'],
                    ['002547', '14900.00', '-18600.00'], ['002316', '2271.80', '1839.11']],
     '2021-08-25': [['000821', '15100.00', '-4286.06'], ['002211', '2673.54', '-1048.12'],
                    ['002163', '8327.73', '-677.31'], ['002132', '11500.00', '-12000.00'],
                    ['002886', '5736.72', '-1032.70'], ['002897', '2159.18', '-2527.37']],
     '2021-09-15': [['002202', '80000.00', '-62000.00'], ['000767', '10900.00', '-10300.00'],
                    ['002140', '5927.67', '-6304.04'], ['002576', '3057.69', '-1209.95'],
                    ['002539', '4162.33', '-20000.00'], ['000565', '4290.16', '-1572.59'],
                    ['002538', '7886.82', '-4799.57'], ['002080', '18500.00', '-28100.00'],
                    ['002442', '12700.00', '-15700.00'], ['002114', '5567.19', '-5099.30'],
                    ['001896', '17300.00', '-30000.00'], ['002309', '6483.82', '-3951.80'],
                    ['000040', '7261.70', '-5528.30'], ['000631', '1846.84', '-3218.65'],
                    ['002759', '9206.66', '-41100.00'], ['002218', '11400.00', '-12500.00']],
     '2021-05-14': [['002670', '6137.41', '-9034.12'], ['000625', '118400.00', '-120000.00'],
                    ['002885', '3169.47', '-3226.01'], ['003027', '4069.60', '6113.13'],
                    ['003030', '3877.41', '-1245.03']],
     '2021-05-11': [['000950', '7371.60', '-6074.29'], ['000966', '2667.74', '-13300.00']],
     '2021-07-06': [['002080', '14600.00', '-7745.91'], ['000993', '4075.56', '-809.90'],
                    ['000966', '11700.00', '-4703.81']],
     '2021-05-19': [['000066', '55900.00', '-12100.00'],
                    ['002045', '4483.52', '-5401.77'], ['002824', '3054.32', '646.43'],
                    ['000839', '11700.00', '-7421.33'], ['002759', '7906.08', '-2591.69'],
                    ['000408', '4629.43', '-12100.00']],
     '2021-07-05': [['002460', '209100.00', '-27800.00'], ['002240', '33200.00', '-7081.75'],
                    ['002108', '18200.00', '-8131.13'],
                    ['002756', '13500.00', '-3789.90'], ['002497', '40700.00', '-1649.19'],
                    ['002957', '1162.07', '-384.59'], ['002190', '5462.38', '-1604.08'],
                    ['002738', '4615.34', '-12000.00'], ['002667', '2125.10', '-228.90'],
                    ['002580', '5046.92', '-4198.51'], ['002192', '5359.56', '-7041.21'],
                    ['002232', '4744.18', '-10000.00'], ['002176', '6618.79', '-37900.00'],
                    ['000004', '2736.71', '-1278.09']],
     '2021-06-10': [['000034', '22900.00', '-8850.74'], ['002279', '6369.68', '-1052.73'],
                    ['003029', '4532.98', '-4548.24'], ['003007', '2984.55', '-3648.32'],
                    ['002369', '3552.72', '-3866.27']],
     '2021-08-06': [['002407', '97600.00', '-87000.00'], ['002533', '6117.39', '-9606.20'],
                    ['002805', '3100.87', '2413.13'], ['002378', '16200.00', '-4579.55'],
                    ['000962', '5671.50', '-2290.38'], ['002842', '4174.06', '-1459.17'],
                    ['000751', '12500.00', '-4914.12'], ['002819', '616.07', '-2004.81'],
                    ['000629', '17100.00', '-7297.16'], ['002136', '8294.81', '1227.04'],
                    ['002759', '30800.00', '-21900.00'], ['000758', '24300.00', '-22300.00'],
                    ['002411', '11500.00', '-4066.77'], ['002708', '7500.78', '-2617.43'],
                    ['002091', '12100.00', '-11900.00']],
     '2021-08-10': [['000576', '9636.80', '-5603.51'], ['000534', '1919.68', '-1169.55'],
                    ['002416', '7231.38', '-401.49'], ['002331', '3366.77', '-1153.94'],
                    ['002189', '5029.82', '-10900.00'], ['003009', '6775.09', '-5941.24']],
     '2021-04-28': [['000908', '1756.26', '-34100.00']],
     '2021-07-16': [['002276', '9614.46', '-6201.10'], ['000422', '5926.41', '-6426.19']
                   ],
     '2021-08-05': [['002389', '24900.00', '-7972.49'], ['002730', '1383.87', '-94.38'],
                    ['002514', '4231.45', '-2393.19'], ['002571', '3608.62', '-496.75'],
                    ['002036', '10400.00', '-7541.05'], ['002454', '6492.03', '-1205.95']],
     '2021-06-07': [['002156', '39900.00', '-27600.00'], ['002326', '17900.00', '-17200.00'],
                    ['002261', '9255.78', '-12100.00'], ['000158', '21000.00', '-28200.00'],
                    ['002169', '3499.16', '-17700.00'], ['002077', '268.83', '-18700.00']],
     '2021-09-02': [['000301', '18300.00', '-23900.00'], ['002669', '5499.96', '882.00'],
                    ['003022', '7184.82', '-2212.86'],
                    ['002922', '7206.72', '-6813.93'], ['002135', '3407.17', '-10100.00'],
                    ['002623', '5355.33', '-2249.75'], ['002620', '3326.48', '-2915.65'],
                    ['002897', '3650.25', '-4417.33']],
     '2021-07-29': [['002129', '50700.00', '5434.01'],
                    ['000009', '16700.00', '-10300.00'], ['002957', '2131.40', '2810.86'],
                    ['002218', '7662.46', '-7886.51'],
                    ['002296', '2972.33', '-117.10']],
     '2021-04-29': [['000718', '15000.00', '3317.28'], ['002762', '7756.68', '-12900.00'],
                    ['002161', '4404.27', '-1353.17']],
     '2021-07-22': [['002455', '10300.00', '-12700.00'], ['000762', '-17200.00', '-51400.00'],
                    ['000009', '2459.88', '-21600.00'], ['002192', '2092.29', '-162.04'],
                    ['002140', '6764.99', '-12600.00'], ['003038', '7033.24', '448.63']],
     '2021-07-14': [['002581', '12200.00', '-12800.00'], ['000837', '5680.75', '-5020.92'],
                    ['002732', '4040.62', '884.96'], ['002190', '8325.82', '-5092.33'],
                    ['002653', '5497.47', '2273.39'], ['002042', '1463.21', '-405.77'],
                    ['000790', '4328.34', '-5018.91'], ['000720', '2854.78', '-409.25'],
                    ['000159', '9178.34', '-527.82'], ['000657', '10300.00', '-4862.17']],
     '2021-06-15': [['002273', '38700.00', '-50100.00'], ['002929', '4658.03', '-1774.99'],
                    ['002703', '4300.77', '-2986.95'], ['002664', '8381.09', '-4151.25'],
                    ['002284', '8470.58', '-6217.23'], ['002101', '2098.08', '-2229.74'],
                    ['002922', '8404.56', '-3763.09'], ['002885', '4029.60', '8243.83'],
                    ['002849', '1483.37', '-1871.46']],
     '2021-06-16': [['002383', '7872.95', '-14100.00']],
     '2021-09-01': [['000425', '45400.00', '-40300.00'], ['002611', '5403.06', '-18600.00']],
     '2021-09-16': [['000912', 7864.14, 6291.84]],
        '2021-09-17': [ ['000791', 23100, 4527.61], ['002487', 14400, -27000]],
        '2021-09-22': [['002616', 3851.9, 234.76], ['002483', 5088.43, -1856.66], ['002039', -1523.67, 486.2], ['002255', 6792.82, -10700], ['000883', 21200, -9468.6], ['000862', 18300, -6219.11], ['000692', 2360.4, 787.88], ['002015', 7953.6, -4029.3]],
        '2021-09-23': [['000815', 3732.82, -1480.99], ['002521', 5017.02, -2004.78], ['002067', 5643.74, -1643.48], ['002078', 19200, -18200], ['000488', 28000, -18300]],
        '2021-09-24': [['002564', 7567.53, -5740.65], ['002459', 19800, -337.88], ['000993', 12700, -9665.67], ['000958', 9863.38, -10000]],
        '2021-09-27': [['000596', 16600, -1288.68], ['002646', 15900, -10100], ['000858', 354700, -35800], ['000993', -9665.67, 11300], ['000860', 18200, -8753.66], ['000631', 1484.02, -843.42], ['002366', 9259.96, -7378.79], ['000568', 93400, 54600]],
        '2021-09-28': [['000554', 1592.09, -722.87], ['002828', 1708.55, -438.23], ['002009', 5087.45, -2446.08], ['003038', 1076.87, 1446.52], ['000407', 3805.61, -1981.18], ['000968', 10700, -9462.96], ['002865', 3393.5, 2754.43], ['000993', 11300, -7533.3], ['000591', 57100, -117500], ['002554', 3278.77, -1356.01], ['000852', 3184.29, -14800], ['000767', 10500, -4662.09]]
        }
    get_K = get_Kline()
    money = 50000
    sum=0
    for k, v in data.items():
        day = datetime.datetime.strptime(k, "%Y-%m-%d").date()

        for stock in v:
            stock[1] = float(stock[1])
            stock[2] = float(stock[2])
            code = stock[0]
            data_list = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code)
            open_price = float(data_list[1][2])#T日开盘价
            pre_close_price = float(data_list[1][6])#T-1日收盘价
            may_syl = str((open_price - pre_close_price) / pre_close_price * 100)[0:5]  # T日低开或者高开
            stock.append(float(may_syl))
            # stock.append(open_price)
            # stock.append(pre_close_price)
        jyl_list=sorted(v,key=lambda x:x[1],reverse=True)#根据交易量降序
        i=0
        for jyl in jyl_list:
            if jyl[3]>=0:i+=1
        # 如果开盘的时候，交易量最大的没有绿，其他也没有绿，选择交易量最大的*0.9985
        if len(jyl_list)==i:#所有都没有绿
            code1=jyl_list[0][0]
            data_list2 = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code1)
            sell_day=data_list2[2][0]
            data_list3 = get_K.testgetKline(sell_day, sell_day, jyl_list[0][0], '5')
            sell_price=float(data_list3[29][3])
            if float(data_list2[1][4]) <= float(data_list2[1][6])*0.985 < float(data_list2[1][3]):
                buy_price = float(data_list2[1][6])*0.985

            else:continue
        #如果开盘的时候，交易量最大的没有绿，其他的有绿的，1、选择最绿的开盘价 2、挂单交易量最大的*0.9985(不管买不买的进去)
        elif jyl_list[0][3]>=0 and len(jyl_list)!=i:
            #选择最绿的开盘价
            # del jyl_list[0]
            # may_syl_list = sorted(jyl_list, key=lambda x: x[2], reverse=False)  # 根据开盘幅度升序
            # code1=may_syl_list[0][0]
            # data_list2 = get_K.getKline(str(day), str(day + datetime.timedelta(15)),code1)
            # buy_price=float(data_list2[1][2])
            # sell_day=data_list2[2][0]
            # data_list3 = get_K.testgetKline(sell_day, sell_day, may_syl_list[0][0], '5')
            # sell_price=float(data_list3[29][3])
            #挂单交易量最大的*0.9985
            code1 = jyl_list[0][0]
            data_list2 = get_K.getKline(str(day), str(day + datetime.timedelta(15)),code1)
            sell_day=data_list2[2][0]
            data_list3 = get_K.testgetKline(sell_day, sell_day, jyl_list[0][0], '5')
            sell_price=float(data_list3[29][3])

            if float(data_list2[1][4]) <= float(data_list2[1][6])*0.985 < float(data_list2[1][3]):
                buy_price = float(data_list2[1][6])*0.985
            else:continue
        #如果开盘的时候，交易量最大的绿了，则选择交易量最大的开盘价
        if jyl_list[0][3]<0:
            code1 = jyl_list[0][0]
            data_list2 = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code1)
            buy_price=float(data_list2[1][2])
            sell_day=data_list2[2][0]
            data_list3 = get_K.testgetKline(sell_day, sell_day, jyl_list[0][0], '5')
            sell_price=float(data_list3[29][3])

        money=money*(1+(sell_price-buy_price)/buy_price)*0.9985
        sum+=1
        print(money,sum,code1,str(day),buy_price,sell_price)
    get_K.bs_close()
# jjj()

def suanfa2():
    money,sum=50000,0
    get_K = get_Kline()
    data={'2021-09-29': ['002610', 59700, -90800],'2021-09-30': ['002709',53700, -44800],'2021-10-08': ['000998',17600,-20400],
          '2021-10-11': ['000836', 5334.09, -3152.31],'2021-10-12': ['000422',31900,734.84],'2021-10-13': ['002326',21800,-2480.54],
          '2021-10-14': ['002610', 41300, -15400],'2021-10-15': ['000423',17800,-23900],'2021-10-18': ['002610',56800,-1395.54],
          '2021-10-19': ['002261', 15000, -14900],'2021-10-20': ['002192',23000,-10000],'2021-10-21': ['000422',38000.00,-68100],
          '2021-10-22': ['002617', 26900, -684.26],'2021-10-25': ['000009', 81200, -4641.81],
        '2021-07-27': ['002902', 6773.72, 2340.1], '2021-08-09': ['002149', 20400, -24300], '2021-06-15': ['002273', 38700, -50100], '2021-06-03': ['000953', 801.04, -539.45], '2021-07-08': ['000009', 15800, -32000], '2021-07-06': ['002080', 14600, -7745.91], '2021-08-05': ['002074', 71000, -60700], '2021-08-27': ['002497', 65100, -56100], '2021-08-20': ['000155', 57200, -35600], '2021-09-10': ['002176', 104300, 22200], '2021-09-24': ['000862', 23400, 23400], '2021-05-14': ['000625', 118400, -120000], '2021-09-23': ['000488', 28000, -18300], '2021-06-25': ['002218', 4673.24, 4707.9], '2021-09-14': ['000009', 73100, -41700], '2021-08-24': ['000878', 26100, -16400], '2021-05-12': ['000625', 114800, -81900], '2021-07-30': ['000762', 39900, -52600], '2021-07-13': ['002411', 13800, -13800], '2021-09-02': ['002202', 64900, 97900], '2021-04-27': ['002612', 16600, -6781.68], '2021-08-04': ['002594', 232500, -97600], '2021-07-23': ['002623', 8411.46, -3089.84], '2021-06-16': ['002383', 7872.95, -14100], '2021-08-23': ['002218', 13300, -8950.47], '2021-06-08': ['002011', 3836.44, -3010.12], '2021-07-28': ['002172', 9658.95, -963.07], '2021-09-13': ['002312', 23300, -36600], '2021-08-19': ['002149', 21400, 5020.89], '2021-04-30': ['000963', 68300, -160800], '2021-06-11': ['000909', 4795.77, -3663.04], '2021-07-22': ['002407', 28400, -43500], '2021-05-11': ['000950', 7371.6, -6074.29], '2021-08-12': ['000792', 32700, -38300], '2021-04-29': ['000718', 15000, 3317.28], '2021-05-21': ['000762', 26100, -29800], '2021-06-09': ['002625', 19400, -959.28], '2021-09-16': ['000731', 16300, 4640.84], '2021-06-07': ['002156', 39900, -27600], '2021-08-17': ['001207', 11000, 4877.84], '2021-06-10': ['000034', 22900, -8850.74], '2021-07-01': ['000908', 12100, -9715.09], '2021-07-26': ['002506', 39200, -27200], '2021-06-30': ['002326', 22300, -20700], '2021-06-28': ['002218', 4707.9, 415.28], '2021-08-13': ['000762', 135700, -25200], '2021-05-24': ['000402', 10800, -3358.6], '2021-05-25': ['000793', 8648.86, -4588.6], '2021-06-24': ['002276', 9355.61, -6290.47], '2021-06-22': ['002623', 4375.28, -328.32], '2021-08-18': ['000738', 26200, -1711.03], '2021-07-09': ['002340', 183900, -97100], '2021-08-10': ['002625', 25200, -19200], '2021-05-27': ['002617', 23000, -3568.71], '2021-05-06': ['000825', 21500, -15500], '2021-09-01': ['000425', 45400, -40300], '2021-05-17': ['002709', 17000, -2765.7], '2021-06-29': ['002759', 13300, -13400], '2021-05-28': ['002407', 43000, 8206.39], '2021-06-01': ['002319', 1312.63, 1397.64], '2021-04-28': ['002773', 11700, -11300], '2021-05-18': ['002997', 7936.82, -5152.66], '2021-07-12': ['000636', 36000, -6788.8], '2021-07-16': ['000768', 59900, -7121.68], '2021-07-21': ['002466', 146600, 20800], '2021-07-20': ['000155', 60000, -37100], '2021-04-23': ['002340', 98900, -56100], '2021-07-02': ['002176', 19800, 6618.79], '2021-05-20': ['002235', 6354.89, -3988.65], '2021-06-23': ['000625', 104100, -51200], '2021-05-13': ['002022', 13300, -4077.56], '2021-08-11': ['002326', 30400, 7893.9], '2021-05-19': ['002759', 7906.08, -2591.69], '2021-08-31': ['000629', 25200, -23900], '2021-08-02': ['002594', 246100, -153800], '2021-06-02': ['003001', 8043.59, -6439.51], '2021-08-30': ['000762', 95500, -4522.85], '2021-08-16': ['000821', 13500, -11800], '2021-07-15': ['000825', 27500, 443.4], '2021-07-14': ['002581', 12200, -12800], '2021-07-07': ['002074', 33000, -9923.4], '2021-09-17': ['000791', 23100, 4527.61], '2021-06-18': ['000158', 38800, -65400], '2021-06-04': ['002373', 26500, -18000], '2021-08-25': ['000821', 15100, -4286.06], '2021-06-21': ['002683', 5611.18, 1031], '2021-05-10': ['000630', 56600, -42000], '2021-07-05': ['002460', 209100, -27800], '2021-08-06': ['002407', 97600, -87000], '2021-04-26': ['000908', 12400, 1497.38], '2021-05-07': ['002162', 25200, -19100], '2021-05-26': ['003039', 28400, 4435.84], '2021-06-17': ['002594', 138700, 90400], '2021-07-29': ['002466', 98300, 19400], '2021-09-22': ['000883', 21200, -9468.6], '2021-09-28': ['000591', 57100, -117500], '2021-09-27': ['000858', 354700, -35800], '2021-05-31': ['002585', 10200, 156.51], '2021-09-15': ['002202', 80000, -62000], '2021-08-03': ['002520', 11100, -4569.12], '2021-07-19': ['002421', 14300, -3794.25], '2021-08-26': ['000960', 19700, -14500]}
    for k,v in data.items():
        code=v[0]
        day = datetime.datetime.strptime(k, "%Y-%m-%d").date()
        data_list = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code)

        sell_day = data_list[2][0]  # 卖的日期
        # 5分钟为单位的K线
        data_list3 = get_K.testgetKline(sell_day, sell_day, code, '5')
        if data_list3 == []: continue
        high_price = []
        data_list4 = get_K.testgetKline(sell_day, sell_day, code, '30')
        for xxx in data_list4:
            high_price.append(float(xxx[4]))
        high_price = high_price[0:4]
        if float(data_list[1][2]) < float(data_list[1][6]):buy_price = float(data_list[1][2])
        elif float(data_list[1][4])<=float(data_list[1][6])*0.984<float(data_list[1][3]):buy_price=float(data_list[1][6])*0.984 # 买价，T日开盘价
        else:continue
        highest_price = max(high_price)
        syl = (highest_price - float(data_list[1][5])) / float(data_list[1][5])
        if syl >= 0.0992:
            sell_price = highest_price
        # elif v[2]<0 and v[1]*0.7<=abs(v[2]):
        #     if buy_price*1.06<=highest_price:sell_price=buy_price*1.06
        #     else:sell_price = float(data_list3[29][3])
            # sell_price=float(data_list3[3][3])
        else:sell_price=float(data_list3[29][3])
        money = money * (1 + (sell_price - buy_price) / buy_price) * 0.9985
        sum += 1
        print(money, sum, code, day, buy_price, sell_price)
# suanfa2()

#尝试用龙虎榜最大交易额
def suanfa3():
    workbook = openpyxl.load_workbook('C:\\Users\Administrator\Desktop\\aa.xlsx')
    sheet = workbook['Sheet1']
    # 读取指定的单元格数据
    data_dic={}
    for index in range(1,113):
        cell1 = sheet.cell(row=index, column=1).value
        cell3 = sheet.cell(row=index, column=3).value
        # print(cell1.date())
        data_dic[cell1]=cell3
    money,sum=50000,0
    get_K = get_Kline()
    for k,v in data_dic.items():
        day = k.date()
        code=v
        data_list = get_K.getKline(str(day), str(day + datetime.timedelta(15)), code)

        sell_day = data_list[2][0]  # 卖的日期
        # 5分钟为单位的K线
        data_list3 = get_K.testgetKline(sell_day, sell_day, code, '5')
        if data_list3 == []: continue
        high_price = []
        data_list4 = get_K.testgetKline(sell_day, sell_day, code, '30')
        for xxx in data_list4:
            high_price.append(float(xxx[4]))
        high_price = high_price[0:4]
        if float(data_list[1][2]) < float(data_list[1][6]):buy_price = float(data_list[1][2])
        elif float(data_list[1][4]) <= float(data_list[1][6]) * 0.984< float(data_list[1][3]):buy_price = float(data_list[1][6]) * 0.984 # 买价，T日开盘价
        else:continue
        highest_price = max(high_price)
        syl = (highest_price - float(data_list[1][5])) / float(data_list[1][5])
        if syl >= 0.095:
            print(syl)
            sell_price = highest_price
        else:sell_price=float(data_list3[29][3])
        money = money * (1 + (sell_price - buy_price) / buy_price) * 0.9985
        sum += 1
        print(money, sum, code, day, buy_price, sell_price)
# suanfa3()
